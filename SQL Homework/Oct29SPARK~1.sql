

--2.1
SELECT * FROM EMPLOYEE;
/
SELECT *
FROM EMPLOYEE
WHERE  LASTNAME = 'King';
/
SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2
SELECT *
FROM ALBUM
ORDER BY TITLE DESC;
/
SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY ASC;

--2.3
INSERT INTO GENRE VALUES (26, 'Anime');
INSERT INTO GENRE VALUES (27, 'Documentary');
/
INSERT ALL 
INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES(9, 'Bob', 'Billy')
INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES(10, 'Labeouf', 'Shia')
SELECT * FROM DUAL; --DUAL IS A DUMMY TABLE 
/
INSERT ALL 
INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES(60, 'Hugh', 'Jackman', 'HJackman@gmail.com')
INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES(61, 'Tom', 'Holland', 'Peter.Parker@gmail.com')
SELECT * FROM DUAL; --DUAL IS A DUMMY TABLE 

--2.4
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;
/
UPDATE ARTIST SET NAME = 'CCR'
WHERE ARTISTID = 76;

--2.5
SELECT *
FROM INVOICE
WHERE  BILLINGADDRESS LIKE 'T%';

--2.6
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;
/
SELECT EMPLOYEEID
FROM EMPLOYEE
WHERE HIREDATE BETWEEN TO_DATE('01-06-2003','DD-MM-YYYY') AND TO_DATE('01-03-2004','DD-MM-YYYY');

--2.7
DELETE FROM INVOICELINE WHERE INVOICELINEID=1860;
/
DELETE FROM INVOICELINE WHERE INVOICEID=342;
/
DELETE FROM INVOICELINE WHERE INVOICEID=50;
/
DELETE FROM INVOICELINE WHERE INVOICEID=61;
/
DELETE FROM INVOICELINE WHERE INVOICEID=116;
/
DELETE FROM INVOICELINE WHERE INVOICEID=245;
/
DELETE FROM INVOICELINE WHERE INVOICEID=268;
/
DELETE FROM INVOICELINE WHERE INVOICEID=290;
/
DELETE FROM INVOICE WHERE CUSTOMERID=32;
/
DELETE FROM CUSTOMER WHERE CUSTOMERID=32;

--3.1
SELECT TO_CHAR
(SYSDATE, 'HH12:MI:SS')
FROM DUAL;
/
SELECT LENGTH('MEDIATYPE') "LENGTH IN CHARACTERS"
FROM DUAL;

--3.2
SELECT AVG(INVOICEID)
FROM INVOICE;
/
SELECT MAX(UNITPRICE)
FROM TRACK;

--3.3
--CREATE FUNCTION
CREATE OR REPLACE FUNCTION AVERAGE_UNITPRICE
RETURN SYS_REFCURSOR
IS 
S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT AVG(UNITPRICE) FROM INVOICELINE;
    RETURN S;
END;

--CALL FUNCTION
DECLARE
S SYS_REFCURSOR;
SOME_NUM INVOICELINE.UNITPRICE%TYPE; 
BEGIN
    S := AVERAGE_UNITPRICE;
    LOOP
    FETCH S INTO SOME_NUM;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE 
    DBMS_OUTPUT.PUT_LINE('Avaerage price is: '||SOME_NUM);
    END LOOP;
    CLOSE S;
END;

--3.4
--CREATE FUNCTION
CREATE OR REPLACE FUNCTION BORN_AFTER
RETURN SYS_REFCURSOR
IS 
S SYS_REFCURSOR;
BEGIN
    OPEN S FOR
    SELECT BIRTHDATE FROM INVOICELINE
    WHERE BIRTHDATE > ('1968');
    RETURN S;
END;

--CALL FUNCTION
DECLARE
S SYS_REFCURSOR;
SOME_DATE INVOICELINE.UNITPRICE%TYPE;
BEGIN
    S := BORN_AFTER;
    LOOP
    FETCH S INTO SOME_DATE;
    EXIT WHEN S%NOTFOUND; -- BREAK OUT OF LOOP WHEN NO ROWS ARE AVAILABLE 
    DBMS_OUTPUT.PUT_LINE('Employees born after 1968 '||SOME_DATE);
    END LOOP;
    CLOSE S;
END;

--4.1
CREATE OR REPLACE PROCEDURE FIRSTNAME_LASTNAME
IS
FL_NAME INTEGER;
BEGIN
SELECT COUNT (E.LASTNAME)
INTO FL_NAME
FROM EMPLOYEE E
WHERE E.EMPLOYEEID =1;
END;

--4.2
--RETURN PERSONAL INFO
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE(E_ID IN NUMBER)
AS
BEGIN
UPDATE EMPLOYEE SET FIRSTNAME='CARLOS'
WHERE EMPLOYEE.EMPLOYEEID = E_ID;
END;
/
BEGIN
UPDATE_EMPLOYEE(1);
END;
/
--RETURN MANAGERS
CREATE OR REPLACE PROCEDURE GET_MANAGER(E_ID IN NUMBER, MANAGER2 OUT VARCHAR2)
IS
MAN_NAME VARCHAR2(30);
BEGIN
SELECT COUNT (E.REPORTSTO)
INTO MAN_NAME
FROM EMPLOYEE E
WHERE E.EMPLOYEEID = E_ID;
MANAGER2 := MAN_NAME;
END;
/
DECLARE
MANAGER2 VARCHAR2(30);
BEGIN
GET_MANAGER(1, MANAGER2);
END;

--4.3
CREATE OR REPLACE PROCEDURE GET_NAME_AND_COMPANY (E_ID IN NUMBER, C_NAME OUT VARCHAR2, C_COMPANY OUT VARCHAR2)
IS
CUST_NAME VARCHAR2(30);
CUST_COMP VARCHAR2(30);
BEGIN
SELECT COUNT (N.REPORTSTO)
INTO CUST_NAME
FROM EMPLOYEE N
WHERE N.EMPLOYEEID = E_ID;
C_NAME := CUST_NAME;
SELECT COUNT (C.REPORTSTO)
INTO CUST_COMP
FROM EMPLOYEE C
WHERE C.EMPLOYEEID = E_ID;
C_COMPANY := CUST_COMP;
END;

--5.0
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (GET_INVOICE_ID NUMBER)
AS
BEGIN
DELETE FROM INVOICE WHERE INVOICEID = GET_INVOICE_ID;
COMMIT;
END;

--6.1
CREATE OR REPLACE TRIGGER TR_INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE --SPECIFY WHICH DML OPERATION, BEFORE/AFTER, AND WHICH TABLE
FOR EACH ROW
DECLARE 
LAST_NAME VARCHAR2(30);
BEGIN
    SELECT COUNT(EM_L.LASTNAME) INTO LAST_NAME FROM EMPLOYEE EM_L;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_ALBUM
AFTER UPDATE ON ALBUM --SPECIFY WHICH DML OPERATION, BEFORE/AFTER, AND WHICH TABLE
FOR EACH ROW
DECLARE 
TITLE_NAME VARCHAR2(30);
BEGIN
    SELECT COUNT(AL_L.TITLE) INTO TITLE_NAME FROM ALBUM AL_L;
END;
/
CREATE OR REPLACE TRIGGER TR_INSERT_CUSTOMER
AFTER DELETE ON CUSTOMER --SPECIFY WHICH DML OPERATION, BEFORE/AFTER, AND WHICH TABLE
FOR EACH ROW
DECLARE 
CUSTOMER_NAME VARCHAR2(30);
BEGIN
    SELECT COUNT(CU_L.FIRSTNAME) INTO CUSTOMER_NAME FROM CUSTOMER CU_L;
END;

--7.1
SELECT C.FIRSTNAME, I.INVOICEID
FROM CUSTOMER C
INNER JOIN INVOICE I
ON C.CUSTOMERID =  I.CUSTOMERID;
/
--7.2
SELECT C.FIRSTNAME, C.LASTNAME, C.CUSTOMERID, I.INVOICEID, I.TOTAL
FROM CUSTOMER C
FULL JOIN INVOICE I
ON C.CUSTOMERID = I.CUSTOMERID;
/
--7.3
SELECT ART.NAME, ALB.TITLE
FROM ARTIST ART
RIGHT JOIN ALBUM ALB
ON ART.ARTISTID = ALB.ARTISTID;
/
--7.4
SELECT *
FROM ARTIST A
CROSS JOIN ALBUM AL
ORDER BY A.NAME;
/
--7.5
SELECT *
FROM EMPLOYEE A, EMPLOYEE B
WHERE A.REPORTSTO = B.REPORTSTO;